import express from "express";
import http from "http";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import { Server as IOServer } from "socket.io";

// utils/logger.ts (make a simple logger, or use console.log for now)
import {logger} from "./utils/logger"; 

import routes from "./routes"

dotenv.config();

const app = express();
const server = http.createServer(app);
const PORT = process.env.PORT || 5000;
const MONGO_URI = process.env.MONGO_URI || "";

// Middlewares
app.use(cors());
app.use(express.json());

// Routes
app.get("/", (req, res) => {
  res.send("Smart Tourist Safety Backend is running üöÄ");
});

app.use("/api", routes);

// --- SOCKET.IO setup ---
const io = new IOServer(server, {
  cors: { origin: "*" },
});

io.on("connection", (socket) => {
  logger.info(`Socket connected: ${socket.id}`);

  socket.on("disconnect", () => 
    logger.info(`Socket disconnected: ${socket.id}`)
  );
});

// --- MongoDB connection + server start ---
mongoose
  .connect(MONGO_URI, {
    // ssl: true,                       // ensure TLS/SSL is enabled
    // tlsAllowInvalidCertificates: true, // TEMP fix for local testing (don‚Äôt use in prod)
    // retryWrites: true,
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 5000,
  })
  .then(() => {
    logger.info("‚úÖ Connected to MongoDB");
    server.listen(PORT, () =>
      logger.info(`üöÄ Server running on port ${PORT}`)
    );
  })
  .catch((err) => {
    logger.error("‚ùå MongoDB connection error", err);
    process.exit(1);
  });


// Export socket instance
export { io };
